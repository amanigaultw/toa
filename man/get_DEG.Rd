% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_DEG.R
\name{get_DEG}
\alias{get_DEG}
\title{get Differentially Expressed Genes}
\usage{
get_DEG(
  expression_data,
  exp_symbol_col = 1,
  regressor_matrix,
  reg_id_col = 1,
  foldThreshDEG = 1.5,
  DEGfun = NULL,
  screenSD = 0,
  verbose = TRUE
)
}
\arguments{
\item{expression_data}{a data frame of gene expression values in long format, where one column is gene
symbols (the first column by default) and other all other columns are subject IDs.
See \code{data("TAU_Trials3_Gene_CPM_Log2")} for an example of appropriate formatting.}

\item{exp_symbol_col}{an integer indicating the position of the gene symbol column in the expression data frame;
the first column is used by default.}

\item{regressor_matrix}{a matrix containing subject IDs, a predictor of interest, and covariates of interest (if any).
The subject ID column position may be altered using the \code{reg_id_col} parameter, but the predictor of interest
column must precede that of covariates in the matrix. See \code{data("TAUTrials2022BC_Intervention_Rm1BadQC_RmB14")}
for an example of appropriate formatting.}

\item{reg_id_col}{an integer indicating the position of of the subject ID column in the \code{regressor_matrix}}

\item{foldThreshDEG}{the X-fold expression threshold to be exceeded for a given gene to be
considered differentially expressed.}

\item{DEGfun}{optionally input a custom function to derived differentially expressed genes. This function pulls variables
from the local environment (including df_DEG, foldThreshDEG) and MUST return a DEG vector; see examples for more.}

\item{screenSD}{minimum gene expression SD; genes that show expression variability below
threshold are excluded.}

\item{verbose}{a bool indicating whether to print function outputs/info to the console.}
}
\value{
returns an object of class "DEG"

An object of class "DEG" is a list containing:
\enumerate{
\item a data frame containing gene symbols, raw regression coefficients, and a DEG variable;
DEG values indicate whether a given gene showed expression values beyond threshold (1 = increased; -1 = decreased; 0 = below threshold).
\item a dataframe generated by transposing the expression_data and merging with it with the regressor_matrix.
\item a list of input arguments.
}
}
\description{
determines whether genes are differentially expressed. The function first screens the \code{expression_data},
then merges it with the \code{regressor_matrix} and performs regressions
to determine which gene show differential expression beyond \code{foldThreshDEG}.
}
\examples{
\dontrun{
#load example data
data("TAU_Trials3_Gene_CPM_Log2")
data("TAUTrials2022BC_Intervention_Rm1BadQC_RmB14")

#get DEG
DEG_result <- get_DEG(expression_data = TAU_Trials3_Gene_CPM_Log2,
                      regressor_matrix = TAUTrials2022BC_Intervention_Rm1BadQC_RmB14,
                      foldThreshDEG = 2)

#view results
table(DEG_result$df_DEG$DEG)

#some alternative DEGfun to consider

#alternative 1
DEGfun1 <- function(df_DEG, foldThreshDEG) {
  #compute DEG as usual
  initialDEG <- sign(df_DEG$dif)*(abs(df_DEG$dif) > log2(foldThreshDEG))
  #recode missing p values as 1
  df_DEG$pValue[is.na(df_DEG$pValue)] <- 1
  #recode DEG values beyond threshold as 0 if the corresponding pvalue is non-signifcant (alpha = .05)
  DEG <- ifelse(df_DEG$pValue > .05, 0, initialDEG)
  #return the DEG vector
  return(DEG)
}

#alternative 2
DEGfun2 <- function(df_DEG, foldThreshDEG) {
  #compute DEG as usual
  initialDEG <- sign(df_DEG$dif)*(abs(df_DEG$dif) > log2(foldThreshDEG))
  #recode missing p values as 1
  df_DEG$pValue[is.na(df_DEG$pValue)] <- 1
  #apply FDR adjustment to pValues
  FDRpValue <- stats::p.adjust(df_DEG$pValue, method = "fdr")
  #recode DEG values beyond threshold as 0 if the corresponding FDR adjusted pvalue is non-signifcant (alpha = .05)
  DEG <- ifelse(FDRpValue > .05, 0, initialDEG)
  #return the DEG vector
  return(DEG)
}

#get DEG
DEG_result <- get_DEG(expression_data = TAU_Trials3_Gene_CPM_Log2,
                      regressor_matrix = TAUTrials2022BC_Intervention_Rm1BadQC_RmB14,
                      foldThreshDEG = 2,
                      DEGfun = DEGfun1)

#view results
table(DEG_result$df_DEG$DEG)

}
}
